
public class AUD_matrices
{
   static double joinMatrices[][][][] = new double[3][3][12][12];
   static double prevalenceArrays[][][] = new double[3][3][12];
   static final int L = 0, M = 1, H = 2;

   public static void init()
   {
      joinMatrices[L][L] = new double[][] {
   		new double[] {1.000,	0.000,	0.141,	0.236,	0.384,	0.332,	0.043,	0.263,	0.181,	0.318,	0.053,	0.054	},
   		new double[] {0.000,	1.000,	0.006,	0.000,	0.009,	0.005,	0.000,	0.009,	0.053,	0.021,	0.079,	0.009	},
   		new double[] {0.118,	0.083,	1.000,	0.019,	0.071,	0.192,	0.109,	0.151,	0.006,	0.130,	0.272,	0.310 },
   		new double[] {0.037,	0.000,	0.009,	1.000,	0.000,	0.017,	0.167,	0.034,	0.138,	0.004,	0.073,	0.000	},
   		new double[] {0.159,	0.026,	0.041,	0.000,	1.000,	0.050,	0.003,	0.157,	0.050,	0.066,	0.019,	0.125	},
   		new double[] {0.211,	0.050,	0.174,	0.087,	0.052,	1.000,	0.000,	0.062,	0.095,	0.296,	0.221,	0.058	},
   		new double[] {0.011,	0.000,	0.022,	0.019,	0.003,	0.000,	1.000,	0.011,	0.000,	0.033,	0.000,	0.021	},
   		new double[] {0.171,	0.031,	0.165,	0.223,	0.267,	0.069,	0.047,	1.000,	0.069,	0.056,	0.163,	0.348	},
   		new double[] {0.032,	0.099,	0.006,	0.116,	0.005,	0.033,	0.000,	0.006,	1.000,	0.000,	0.008,	0.014	},
   		new double[] {0.190,	0.165,	0.136,	0.032,	0.069,	0.206,	0.211,	0.060,	0.000,	1.000,	0.112,	0.062	},
   		new double[] {0.020,	0.171,	0.126,	0.101,	0.007,	0.048,	0.000,	0.066,	0.006,	0.024,	1.000,	0.000	},
   		new double[] {0.052,	0.042,	0.173,	0.000,	0.132,	0.048,	0.253,	0.181,	0.069,	0.051,	0.000,	1.000	}
   	};
   	prevalenceArrays[L][L] = new double[]{0.184, 0.007, 0.098, 0.033, 0.079, 0.122, 0.025, 0.166, 0.031, 0.121, 0.088, 0.045};
      
      joinMatrices[L][M] = new double[][] {
   		new double[] {1.000,	0.000,	0.170,	0.120,	0.212,	0.104,	0.113,	0.166,	0.076,	0.138,	0.106,	0.045	},
   		new double[] {0.000,	1.000,	0.011,	0.002,	0.056,	0.035,	0.048,	0.014,	0.068,	0.081,	0.024,	0.005	},
   		new double[] {0.118,	0.081,	1.000,	0.016,	0.038,	0.145,	0.119,	0.152,	0.060,	0.126,	0.113,	0.219	},
   		new double[] {0.064,	0.002,	0.004,	1.000,	0.015,	0.013,	0.030,	0.014,	0.037,	0.039,	0.019,	0.000	},
   		new double[] {0.226,	0.162,	0.032,	0.007,	1.000,	0.023,	0.009,	0.234,	0.064,	0.064,	0.010,	0.085	},
   		new double[] {0.131,	0.064,	0.137,	0.079,	0.058,	1.000,	0.005,	0.115,	0.229,	0.292,	0.254,	0.150	},
   		new double[] {0.021,	0.032,	0.068,	0.033,	0.014,	0.004,	1.000,	0.023,	0.013,	0.079,	0.029,	0.133	},
   		new double[] {0.200,	0.003,	0.143,	0.019,	0.283,	0.128,	0.022,	1.000,	0.005,	0.054,	0.075,	0.267	},
   		new double[] {0.041,	0.027,	0.078,	0.028,	0.037,	0.044,	0.019,	0.024,	1.000,	0.036,	0.018,	0.031	},
   		new double[] {0.098,	0.167,	0.167,	0.064,	0.090,	0.094,	0.149,	0.069,	0.046,	1.000,	0.053,	0.062	},
   		new double[] {0.070,	0.028,	0.090,	0.033,	0.021,	0.186,	0.034,	0.067,	0.141,	0.062,	1.000,	0.002	},
   		new double[] {0.031,	0.033,	0.100,	0.000,	0.076,	0.023,	0.052,	0.121,	0.060,	0.028,	0.001,	1.000	}
   	};
   	prevalenceArrays[L][M] = new double[]{0.218, 0.016, 0.086, 0.033, 0.081, 0.125, 0.024, 0.169, 0.029, 0.106, 0.072, 0.041};
      
      joinMatrices[L][H] = new double[][] {
   		new double[] {1.000,	0.003,	0.097,	0.083,	0.321,	0.181,	0.060,	0.222,	0.112,	0.292,	0.076,	0.061	},
   		new double[] {0.000,	1.000,	0.002,	0.000,	0.013,	0.007,	0.018,	0.014,	0.000,	0.007,	0.007,	0.001	},
   		new double[] {0.093,	0.029,	1.000,	0.059,	0.191,	0.192,	0.134,	0.210,	0.059,	0.140,	0.174,	0.290	},
   		new double[] {0.035,	0.000,	0.042,	1.000,	0.001,	0.022,	0.004,	0.046,	0.106,	0.026,	0.060,	0.010	},
   		new double[] {0.168,	0.080,	0.062,	0.004,	1.000,	0.041,	0.134,	0.236,	0.112,	0.069,	0.045,	0.074	},
   		new double[] {0.227,	0.166,	0.241,	0.158,	0.042,	1.000,	0.009,	0.087,	0.109,	0.315,	0.243,	0.111	},
   		new double[] {0.036,	0.012,	0.036,	0.002,	0.003,	0.001,	1.000,	0.002,	0.000,	0.035,	0.032,	0.001	},
   		new double[] {0.155,	0.087,	0.153,	0.125,	0.246,	0.058,	0.027,	1.000,	0.008,	0.054,	0.076,	0.140	},
   		new double[] {0.017,	0.000,	0.010,	0.069,	0.017,	0.031,	0.000,	0.001,	1.000,	0.004,	0.005,	0.026	},
   		new double[] {0.186,	0.221,	0.134,	0.176,	0.075,	0.204,	0.073,	0.043,	0.019,	1.000,	0.031,	0.035	},
   		new double[] {0.046,	0.022,	0.124,	0.046,	0.052,	0.121,	0.031,	0.081,	0.026,	0.033,	1.000,	0.000	},
   		new double[] {0.037,	0.005,	0.098,	0.029,	0.040,	0.017,	0.009,	0.058,	0.198,	0.025,	0.000,	1.000	}
   	};
   	prevalenceArrays[L][H] = new double[]{0.211, 0.003, 0.127, 0.009, 0.111, 0.114, 0.008, 0.165, 0.009, 0.124, 0.073, 0.046};
      
      joinMatrices[M][L] = new double[][] {
   		new double[] {1.000,	0.012,	0.091,	0.062,	0.221,	0.136,	0.061,	0.183,	0.062,	0.158,	0.068,	0.069	},
   		new double[] {0.005,	1.000,	0.000,	0.017,	0.075,	0.088,	0.081,	0.016,	0.074,	0.060,	0.162,	0.047	},
   		new double[] {0.074,	0.000,	1.000,	0.002,	0.039,	0.133,	0.118,	0.187,	0.089,	0.096,	0.090,	0.128	},
   		new double[] {0.045,	0.014,	0.003,	1.000,	0.012,	0.044,	0.024,	0.083,	0.096,	0.016,	0.049,	0.049	},
   		new double[] {0.148,	0.070,	0.053,	0.017,	1.000,	0.043,	0.007,	0.084,	0.042,	0.172,	0.006,	0.171	},
   		new double[] {0.144,	0.202,	0.168,	0.084,	0.043,	1.000,	0.017,	0.077,	0.127,	0.099,	0.169,	0.092	},
   		new double[] {0.008,	0.068,	0.062,	0.062,	0.019,	0.037,	1.000,	0.000,	0.187,	0.066,	0.040,	0.064	},
   		new double[] {0.186,	0.105,	0.230,	0.104,	0.161,	0.084,	0.000,	1.000,	0.025,	0.086,	0.096,	0.216	},
   		new double[] {0.064,	0.123,	0.107,	0.168,	0.080,	0.134,	0.066,	0.018,	1.000,	0.037,	0.030,	0.062	},
   		new double[] {0.124,	0.128,	0.120,	0.023,	0.193,	0.095,	0.130,	0.061,	0.038,	1.000,	0.001,	0.076	},
   		new double[] {0.032,	0.093,	0.086,	0.106,	0.036,	0.150,	0.134,	0.054,	0.081,	0.006,	1.000,	0.026	},
   		new double[] {0.028,	0.042,	0.082,	0.069,	0.120,	0.056,	0.076,	0.093,	0.038,	0.060,	0.003,	1.000	}
   	};
   	prevalenceArrays[M][L] = new double[]{0.149, 0.044, 0.114, 0.064, 0.051, 0.099, 0.058, 0.131, 0.067, 0.102, 0.056, 0.064};
      
      joinMatrices[M][M] = new double[][] {
   		new double[] {1.000,	0.000,	0.066,	0.089,	0.042,	0.117,	0.004,	0.142,	0.019,	0.046,	0.067,	0.022	},
   		new double[] {0.000,	1.000,	0.008,	0.023,	0.073,	0.074,	0.026,	0.002,	0.104,	0.037,	0.010,	0.029	},
   		new double[] {0.131,	0.055,	1.000,	0.074,	0.093,	0.165,	0.120,	0.171,	0.132,	0.287,	0.193,	0.121	},
   		new double[] {0.039,	0.020,	0.009,	1.000,	0.006,	0.020,	0.030,	0.037,	0.037,	0.015,	0.037,	0.024	},
   		new double[] {0.085,	0.176,	0.072,	0.028,	1.000,	0.018,	0.054,	0.104,	0.023,	0.147,	0.037,	0.188	},
   		new double[] {0.161,	0.037,	0.092,	0.082,	0.010,	1.000,	0.003,	0.061,	0.116,	0.086,	0.138,	0.011	},
   		new double[] {0.013,	0.030,	0.089,	0.063,	0.021,	0.013,	1.000,	0.016,	0.004,	0.094,	0.000,	0.078	},
   		new double[] {0.203,	0.005,	0.140,	0.102,	0.142,	0.111,	0.016,	1.000,	0.051,	0.096,	0.133,	0.103	},
   		new double[] {0.010,	0.090,	0.041,	0.080,	0.013,	0.073,	0.002,	0.031,	1.000,	0.016,	0.028,	0.051	},
   		new double[] {0.120,	0.166,	0.262,	0.059,	0.210,	0.126,	0.136,	0.138,	0.019,	1.000,	0.067,	0.081	},
   		new double[] {0.044,	0.025,	0.139,	0.060,	0.103,	0.125,	0.000,	0.093,	0.073,	0.061,	1.000,	0.008	},
   		new double[] {0.050,	0.038,	0.083,	0.055,	0.143,	0.015,	0.110,	0.061,	0.065,	0.045,	0.003,	1.000	}
   	};
   	prevalenceArrays[M][M] = new double[]{0.231, 0.024, 0.076, 0.079, 0.022, 0.103, 0.037, 0.209, 0.064, 0.041, 0.086, 0.026};
      
      joinMatrices[M][H] = new double[][] {
   		new double[] {1.000,	0.010,	0.040,	0.165,	0.077,	0.106,	0.066,	0.100,	0.091,	0.140,	0.066,	0.018	},
   		new double[] {0.010,	1.000,	0.055,	0.032,	0.060,	0.098,	0.147,	0.004,	0.152,	0.071,	0.183,	0.032	},
   		new double[] {0.029,	0.008,	1.000,	0.065,	0.112,	0.102,	0.057,	0.225,	0.015,	0.045,	0.076,	0.040	},
   		new double[] {0.156,	0.074,	0.040,	1.000,	0.012,	0.035,	0.079,	0.063,	0.190,	0.055,	0.102,	0.063	},
   		new double[] {0.060,	0.046,	0.043,	0.013,	1.000,	0.014,	0.093,	0.022,	0.050,	0.099,	0.015,	0.116	},
   		new double[] {0.129,	0.111,	0.112,	0.043,	0.036,	1.000,	0.026,	0.076,	0.096,	0.237,	0.091,	0.054	},
   		new double[] {0.058,	0.148,	0.062,	0.181,	0.042,	0.017,	1.000,	0.017,	0.027,	0.048,	0.064,	0.148	},
   		new double[] {0.101,	0.050,	0.222,	0.067,	0.096,	0.096,	0.035,	1.000,	0.015,	0.107,	0.113,	0.099	},
   		new double[] {0.126,	0.113,	0.027,	0.169,	0.115,	0.079,	0.082,	0.015,	1.000,	0.011,	0.090,	0.038	},
   		new double[] {0.075,	0.033,	0.023,	0.026,	0.056,	0.084,	0.021,	0.032,	0.050,	1.000,	0.010,	0.019	},
   		new double[] {0.052,	0.111,	0.060,	0.090,	0.011,	0.066,	0.079,	0.141,	0.115,	0.014,	1.000,	0.010	},
   		new double[] {0.020,	0.021,	0.044,	0.058,	0.111,	0.030,	0.132,	0.033,	0.019,	0.081,	0.007,	1.000	}
   	};
   	prevalenceArrays[M][H] = new double[]{0.161, 0.052, 0.082, 0.069, 0.053, 0.074, 0.042, 0.174, 0.073, 0.058, 0.117, 0.044};
      
      joinMatrices[H][L] = new double[][] {
   		new double[] {1.000,	0.000,	0.010,	0.000,	0.160,	0.155,	0.202,	0.146,	0.083,	0.142,	0.037,	0.034	},
   		new double[] {0.000,	1.000,	0.027,	0.025,	0.047,	0.167,	0.037,	0.015,	0.067,	0.077,	0.128,	0.024	},
   		new double[] {0.010,	0.014,	1.000,	0.012,	0.041,	0.154,	0.042,	0.044,	0.185,	0.014,	0.011,	0.063	},
   		new double[] {0.000,	0.019,	0.018,	1.000,	0.028,	0.000,	0.063,	0.015,	0.038,	0.200,	0.044,	0.061	},
   		new double[] {0.261,	0.070,	0.042,	0.018,	1.000,	0.039,	0.009,	0.286,	0.026,	0.165,	0.231,	0.289	},
   		new double[] {0.101,	0.279,	0.119,	0.000,	0.013,	1.000,	0.016,	0.011,	0.068,	0.041,	0.202,	0.219	},
   		new double[] {0.049,	0.061,	0.101,	0.127,	0.005,	0.041,	1.000,	0.035,	0.108,	0.046,	0.184,	0.051	},
   		new double[] {0.104,	0.028,	0.050,	0.006,	0.260,	0.012,	0.012,	1.000,	0.000,	0.018,	0.050,	0.079	},
   		new double[] {0.083,	0.100,	0.241,	0.025,	0.028,	0.077,	0.145,	0.000,	1.000,	0.015,	0.044,	0.086	},
   		new double[] {0.122,	0.023,	0.027,	0.200,	0.092,	0.035,	0.012,	0.037,	0.010,	1.000,	0.022,	0.056	},
   		new double[] {0.026,	0.165,	0.027,	0.237,	0.136,	0.142,	0.198,	0.075,	0.067,	0.033,	1.000,	0.040	},
   		new double[] {0.044,	0.041,	0.138,	0.149,	0.190,	0.179,	0.063,	0.134,	0.149,	0.048,	0.049,	1.000	}
   	};
   	prevalenceArrays[H][L] = new double[]{0.194, 0.075, 0.078, 0.068, 0.085, 0.121, 0.033, 0.112, 0.082, 0.028, 0.066, 0.058};
      
      joinMatrices[H][M] = new double[][] {
   		new double[] {1.000,	0.034,	0.074,	0.106,	0.079,	0.051,	0.197,	0.083,	0.104,	0.110,	0.053,	0.025	},
   		new double[] {0.025,	1.000,	0.017,	0.061,	0.159,	0.273,	0.122,	0.231,	0.112,	0.153,	0.083,	0.067	},
   		new double[] {0.044,	0.053,	1.000,	0.041,	0.017,	0.047,	0.098,	0.040,	0.174,	0.069,	0.100,	0.042	},
   		new double[] {0.114,	0.063,	0.059,	1.000,	0.085,	0.095,	0.130,	0.129,	0.107,	0.140,	0.115,	0.064	},
   		new double[] {0.060,	0.102,	0.049,	0.012,	1.000,	0.013,	0.049,	0.172,	0.023,	0.085,	0.129,	0.063	},
   		new double[] {0.053,	0.029,	0.069,	0.022,	0.030,	1.000,	0.015,	0.014,	0.084,	0.120,	0.036,	0.100	},
   		new double[] {0.196,	0.149,	0.219,	0.197,	0.086,	0.016,	1.000,	0.033,	0.043,	0.196,	0.091,	0.123	},
   		new double[] {0.079,	0.225,	0.027,	0.030,	0.198,	0.011,	0.028,	1.000,	0.000,	0.059,	0.310,	0.096	},
   		new double[] {0.103,	0.065,	0.131,	0.094,	0.045,	0.164,	0.038,	0.000,	1.000,	0.003,	0.018,	0.006	},
   		new double[] {0.130,	0.157,	0.175,	0.137,	0.123,	0.209,	0.227,	0.078,	0.005,	1.000,	0.046,	0.074	},
   		new double[] {0.011,	0.114,	0.105,	0.013,	0.114,	0.016,	0.048,	0.169,	0.010,	0.014,	1.000,	0.007	},
   		new double[] {0.018,	0.009,	0.076,	0.120,	0.064,	0.104,	0.049,	0.052,	0.005,	0.050,	0.020,	1.000	}
   	};
   	prevalenceArrays[H][M] = new double[]{0.155, 0.045, 0.111, 0.113, 0.032, 0.061, 0.091, 0.206, 0.037, 0.067, 0.056, 0.025};
      
      joinMatrices[H][H] = new double[][] {
   		new double[] {1.000,	0.058,	0.054,	0.118,	0.060,	0.127,	0.080,	0.155,	0.114,	0.139,	0.070,	0.069	},
   		new double[] {0.018,	1.000,	0.025,	0.031,	0.056,	0.058,	0.061,	0.044,	0.071,	0.060,	0.047,	0.030	},
   		new double[] {0.021,	0.016,	1.000,	0.099,	0.018,	0.154,	0.029,	0.121,	0.118,	0.144,	0.132,	0.117	},
   		new double[] {0.132,	0.078,	0.086,	1.000,	0.069,	0.078,	0.149,	0.152,	0.113,	0.076,	0.206,	0.173	},
   		new double[] {0.086,	0.083,	0.033,	0.035,	1.000,	0.011,	0.040,	0.087,	0.066,	0.039,	0.058,	0.080	},
   		new double[] {0.106,	0.046,	0.119,	0.030,	0.022,	1.000,	0.038,	0.037,	0.103,	0.068,	0.093,	0.069	},
   		new double[] {0.082,	0.117,	0.047,	0.133,	0.054,	0.056,	1.000,	0.047,	0.055,	0.108,	0.120,	0.138	},
   		new double[] {0.147,	0.057,	0.125,	0.133,	0.080,	0.054,	0.031,	1.000,	0.033,	0.037,	0.084,	0.077	},
   		new double[] {0.057,	0.112,	0.070,	0.072,	0.085,	0.119,	0.051,	0.029,	1.000,	0.071,	0.041,	0.057	},
   		new double[] {0.099,	0.138,	0.103,	0.034,	0.054,	0.059,	0.070,	0.045,	0.045,	1.000,	0.023,	0.038	},
   		new double[] {0.115,	0.103,	0.124,	0.172,	0.136,	0.104,	0.120,	0.145,	0.067,	0.066,	1.000,	0.075	},
   		new double[] {0.062,	0.039,	0.137,	0.145,	0.134,	0.103,	0.101,	0.061,	0.062,	0.038,	0.050,	1.000	}
   	};
   	prevalenceArrays[H][H] = new double[]{0.211, 0.048, 0.056, 0.112, 0.066, 0.078, 0.055, 0.151, 0.081, 0.043, 0.067, 0.031};
   }

   private static double lerp(double min, double max, double val)
	{
		return (val - min) / (max - min);
	}
	private static double ilerp(double min, double max, double val)
	{
		return 1 - (val - min) / (max - min);
	}
   
   public static double[][] createJMap(double stress, double energy)
	{
		double map[][] = new double[12][12];
		
		if (stress < 0.5)
		{
			for (int i = 0; i < 12; i++)
			{
				if (energy < 0.5)
				{
					for (int j = 0; j < 12; j++)
					{
						map[i][j] = ilerp(0, 0.5, stress) * ilerp(0, 0.5, energy) * joinMatrices[L][L][i][j] + 
							ilerp(0, 0.5, stress) * lerp(0, 0.5, energy) * joinMatrices[L][M][i][j] + 
							lerp(0, 0.5, stress) * ilerp(0, 0.5, energy) * joinMatrices[M][L][i][j] + 
							lerp(0, 0.5, stress) * lerp(0, 0.5, energy) * joinMatrices[M][M][i][j];
					}
				}
				else // energy > 0.5
				{
					for (int j = 0; j < 12; j++)
					{
						map[i][j] = ilerp(0, 0.5, stress) * ilerp(0.5, 1, energy) * joinMatrices[L][M][i][j] + 
							ilerp(0, 0.5, stress) * lerp(0.5, 1, energy) * joinMatrices[L][H][i][j] + 
							lerp(0, 0.5, stress) * ilerp(0.5, 1, energy) * joinMatrices[M][M][i][j] + 
							lerp(0, 0.5, stress) * lerp(0.5, 1, energy) * joinMatrices[M][H][i][j];
					}
				}
			}
		}
		else // stress > 0.5
		{
			for (int i = 0; i < 12; i++)
			{
				if (energy < 0.5)
				{
					for (int j = 0; j < 12; j++)
					{
						map[i][j] = ilerp(0.5, 1, stress) * ilerp(0, 0.5, energy) * joinMatrices[M][L][i][j] + 
							ilerp(0.5, 1, stress) * lerp(0, 0.5, energy) * joinMatrices[M][M][i][j] + 
							lerp(0.5, 1, stress) * ilerp(0, 0.5, energy) * joinMatrices[H][L][i][j] + 
							lerp(0.5, 1, stress) * lerp(0, 0.5, energy) * joinMatrices[H][M][i][j];
					}
				}
				else // energy > 0.5
				{
					for (int j = 0; j < 12; j++)
					{
						map[i][j] = ilerp(0.5, 1, stress) * ilerp(0.5, 1, energy) * joinMatrices[M][M][i][j] + 
							ilerp(0.5, 1, stress) * lerp(0.5, 1, energy) * joinMatrices[M][H][i][j] + 
							lerp(0.5, 1, stress) * ilerp(0.5, 1, energy) * joinMatrices[H][M][i][j] + 
							lerp(0.5, 1, stress) * lerp(0.5, 1, energy) * joinMatrices[H][H][i][j];
					}
				}
			}
		}

		return map;
	}
	public static double[] createPMap(double stress, double energy)
	{
		double[] map = new double[12];
		
		if (stress < 0.5)
			if (energy < 0.5)
			{
				for (int i = 0; i < 12; i++)
				{
					map[i] = ilerp(0, 0.5, stress) * ilerp(0, 0.5, energy) * prevalenceArrays[L][L][i] + 
							ilerp(0, 0.5, stress) * lerp(0, 0.5, energy) * prevalenceArrays[L][M][i] + 
							lerp(0, 0.5, stress) * ilerp(0, 0.5, energy) * prevalenceArrays[M][L][i] + 
							lerp(0, 0.5, stress) * lerp(0, 0.5, energy) * prevalenceArrays[M][M][i];
				}
			}
			else
			{
				for (int i = 0; i < 12; i++)
				{
					map[i] = ilerp(0, 0.5, stress) * ilerp(0.5, 1, energy) * prevalenceArrays[L][M][i] + 
							ilerp(0, 0.5, stress) * lerp(0.5, 1, energy) * prevalenceArrays[L][H][i] + 
							lerp(0, 0.5, stress) * ilerp(0.5, 1, energy) * prevalenceArrays[M][M][i] + 
							lerp(0, 0.5, stress) * lerp(0.5, 1, energy) * prevalenceArrays[M][H][i];
				}
			
			}
		else
		{
			if (energy < 0.5)
			{
				for (int i = 0; i < 12; i++)
				{
					map[i] = ilerp(0.5, 1, stress) * ilerp(0, 0.5, energy) * prevalenceArrays[M][L][i] + 
							ilerp(0.5, 1, stress) * lerp(0, 0.5, energy) * prevalenceArrays[M][M][i] + 
							lerp(0.5, 1, stress) * ilerp(0, 0.5, energy) * prevalenceArrays[H][L][i] + 
							lerp(0.5, 1, stress) * lerp(0, 0.5, energy) * prevalenceArrays[H][M][i];
				}
			}
			else
			{
				for (int i = 0; i < 12; i++)
				{
					map[i] = ilerp(0.5, 1, stress) * ilerp(0.5, 1, energy) * prevalenceArrays[M][M][i] + 
							ilerp(0.5, 1, stress) * lerp(0.5, 1, energy) * prevalenceArrays[M][H][i] + 
							lerp(0.5, 1, stress) * ilerp(0.5, 1, energy) * prevalenceArrays[H][M][i] + 
							lerp(0.5, 1, stress) * lerp(0.5, 1, energy) * prevalenceArrays[H][H][i];
				}
			}
		}
		return map;
	}
	
	public static double[][] createTriJMap(double stress, double energy)
	{
		double map[][] = new double[12][12];
		
		if (stress < 0.5)
		{
			for (int i = 0; i < 12; i++)
			{
				for (int j = 0; j < 12; j++)
				{
					map[i][j] = ilerp(0, 0.5, stress) * ilerp(0.5, 1, energy) * joinMatrices[L][M][i][j] + 
						ilerp(0, 0.5, stress) * lerp(0.5, 1, energy) * joinMatrices[L][H][i][j] + 
						lerp(0, 0.5, stress) * ilerp(0.5, 1, energy) * joinMatrices[M][M][i][j] + 
						lerp(0, 0.5, stress) * lerp(0.5, 1, energy) * joinMatrices[M][H][i][j];
				}
			}
		}
		else // stress > 0.5
		{
			for (int i = 0; i < 12; i++)
			{
				for (int j = 0; j < 12; j++)
				{
					map[i][j] = ilerp(0.5, 1, stress) * ilerp(0.5, 1, energy) * joinMatrices[M][M][i][j] + 
						ilerp(0.5, 1, stress) * lerp(0.5, 1, energy) * joinMatrices[M][H][i][j] + 
						lerp(0.5, 1, stress) * ilerp(0.5, 1, energy) * joinMatrices[H][M][i][j] + 
						lerp(0.5, 1, stress) * lerp(0.5, 1, energy) * joinMatrices[H][H][i][j];
				}
			}
		}

		return map;
	}
   
	public static double[] createTriPMap(double stress, double energy)
	{
		double map[] = new double[12];
		
		if (stress < 0.5)
			for (int i = 0; i < 12; i++)
			{
				map[i] = ilerp(0, 0.5, stress) * ilerp(0.5, 1, energy) * prevalenceArrays[L][M][i] + 
						ilerp(0, 0.5, stress) * lerp(0.5, 1, energy) * prevalenceArrays[L][H][i] + 
						lerp(0, 0.5, stress) * ilerp(0.5, 1, energy) * prevalenceArrays[M][M][i] + 
						lerp(0, 0.5, stress) * lerp(0.5, 1, energy) * prevalenceArrays[M][H][i];
			}
		else
		{
			for (int i = 0; i < 12; i++)
			{
				map[i] = ilerp(0.5, 1, stress) * ilerp(0.5, 1, energy) * prevalenceArrays[M][M][i] + 
						ilerp(0.5, 1, stress) * lerp(0.5, 1, energy) * prevalenceArrays[M][H][i] + 
						lerp(0.5, 1, stress) * ilerp(0.5, 1, energy) * prevalenceArrays[H][M][i] + 
						lerp(0.5, 1, stress) * lerp(0.5, 1, energy) * prevalenceArrays[H][H][i];
			}
		}
		return map;
	}



}